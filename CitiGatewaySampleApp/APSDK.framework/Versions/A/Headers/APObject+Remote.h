//
//  APObject+Remote.h
//  AnyPresence SDK
//

/*!
 @header APObject+Remote
 @abstract Remote category for APObject class
 
 @discussion Some query methods take an optional context parameter.  A context should be used when string interpolation is required (i.e. http://server.com/save/{{some_value}}/here, where {{some_value}} is the string that requires interpolation).  A context will be used to replace uninterpreted strings with the values of their corresponding object value.  They should be represented by either an instance of an object that is KVC complaint, containing the values with which to replaced the uninterpolated string or by a NSDictionary of 'string' to 'object instance' mappings <pre>(@{ @"obj" : instanceOfObject } where instanceOfObject is an instance of a KVC complaint object)</pre>.  See examples:
 
 <pre>
 Uninterpreted URL Request String: "http://server.com/save/{{map.longitude}}/here"
 Object: Map *myMap = self.map; (self.map is assumed to have values set prior to interpolation)
 Context: NSDictionary *context = @{ @"map" : myMap };
 
 Context Note:
 @"map" = Represents the prefix in the uninterpreted string (i.e. map in {{map.longitude}})
 myMap = Object used to interpolate all strings prefixed with "map."
 </pre>
 
 If uninterpolated string does not contain a prefix (i.e. {{longitude}}) a single object instance is allowed to be passed as a context.
 
 <pre>
 Uninterpreted URL Request String: "http://server.com/save/{{map.longitude}}/here"
 Object: Map *myMap = self.map; (self.map is assumed to have values set prior to interpolation)
 Context: id *context = myMap;
 
 Context Note:
 myMap = Object used to interpolate all strings prefixed with "map."
 </pre>
 
 If more than one object is required for interpolation (i.e. http://server.com/save/{{map.latitude}}/in/{{folder.name}}), a NSDictionary of 'string' to 'object instance' mappings is required.
 
 <pre>
 Uninterpreted URL Request String: "http://server.com/save/{{map.latitude}}/in/{{folder.name}}"
 Object 1: Map *myMap = self.map; (self.map is assumed to have values set prior to interpolation)
 Object 2: Folder *someFolder = self.folder; (self.folder is assumed to have values set prior to interpolation)
 Context: NSDictionary *context = @{ @"map" : myMap, @"folder" : someFolder };
 
 Context Note:
 @"map" = Represents the prefix in the uninterpreted string (i.e. map in {{map.longitude}}).
 @"folder" = Represents the prefix in the uninterpolated string (i.e. folder in {{folder.name}}.
 myMap = Object used to interpolate all strings prefixed with "map."
 someFolder = Object used to interpolate all strings prefixed with "folder."
 </pre>

 A context is optional and only required if interpolation is necessary of any previously defined variables at SDK creation.  Set context to nil if no interpolation is required.  Passing nil for context or providing a non-KVC compliant context object (i.e. NSArray) when interpolation is required will produce a string that is partially or entirely uninterpolated causing the given request to fail.
 */

#import <Foundation/Foundation.h>
#import "APObject.h"
#import "Typedefs.h"

/*!
 @const kAPObjectRemoteErrorDictionaryKey
 @abstract Key that points to a dictionary of errors returned by the server.
 */
extern NSString * const kAPObjectRemoteErrorDictionaryKey;

/*!
 @category APObject (Remote)
 @abstract Adds remote CRUD capabilities to APObject instances.
 @discussion All public properties are passed on to the remote server.
 Make sure to set base URL for the remote API with @link //apple_ref/occ/intfm/APObject/setBaseURL: @/link prior to use.
 Use @link //apple_ref/occ/cat/APObject(RemoteConfig) @/link to set the primary key property.
 */
@interface APObject (Remote)

#pragma mark -
#pragma mark Configuration

/*!
 @methodgroup Configuration
 */

/*!
 @method setBaseURL:
 @abstract Sets base URL for remote API.
 @param url Base URL for remote API (e.g. http://www.myserver.com/api/v1/).
 */
+ (void)setBaseURL:(NSURL *)url __attribute((deprecated("APObject setBaseURL: is deprecated. Please use AnyPresenceAPI setBaseURL: instead.")));

#pragma mark -
#pragma mark CRUD

/*!
 @methodgroup CRUD Methods (Synchronuous)
 */

/*!
 @method create:
 @abstract Persists new object on remote server.
 @param error Error that has occured while executing the request, if any.
 @result YES if the operation succeeded.
 @discussion Make sure to set the primary key unless it is generated by the server.
 */
- (BOOL)create:(NSError **)error __attribute__((deprecated("Use createAsync: instead.")));

/*!
 @method createWithContext:error:
 @abstract Persists new object on remote server.
 @param context Object instance or NSDictionary of ‘string’ to ‘object instance’ mapping for use with interpolation of headers, request URL, or previously defined variable at SDK creation.  For more details on context, see the discussion section of this class.
 @param error Error that has occured while executing the request, if any.
 @result YES if the operation succeeded.
 @discussion Make sure to set the primary key unless it is generated by the server.
 */
- (BOOL)createWithContext:(id)context error:(NSError **)error __attribute__((deprecated("Use createAsyncWithContext:async: instead.")));

/*!
 @method update:
 @abstract Updates existing object on remote server.
 @param error Error that has occured while executing the request, if any.
 @result YES if the operation succeeded.
 */
- (BOOL)update:(NSError **)error __attribute__((deprecated("Use updateAsync: instead.")));

/*!
 @method updateWithContext:error:
 @abstract Updates existing object on remote server.
 @param context Object instance or NSDictionary of ‘string’ to ‘object instance’ mapping for use with interpolation of headers, request URL, or previously defined variable at SDK creation.  For more details on context, see the discussion section of this class.
 @param error Error that has occured while executing the request, if any.
 @result YES if the operation succeeded.
 */
- (BOOL)updateWithContext:(id)context error:(NSError **)error __attribute__((deprecated("Use updateAsyncWithContext:async: instead.")));

/*!
 @method destroy:
 @abstract Deletes existing object on remote server.
 @param error Error that has occured while executing the request, if any.
 @result YES if the operation succeeded.
 */
- (BOOL)destroy:(NSError **)error __attribute__((deprecated("Use destroyAsync: instead.")));

/*!
 @method destroyWithContext:error:
 @abstract Deletes existing object on remote server.
 @param context Object instance or NSDictionary of ‘string’ to ‘object instance’ mapping for use with interpolation of headers, request URL, or previously defined variable at SDK creation.  For more details on context, see the discussion section of this class.
 @param error Error that has occured while executing the request, if any.
 @result YES if the operation succeeded.
 */
- (BOOL)destroyWithContext:(id)context error:(NSError **)error __attribute__((deprecated("Use destroyAsyncWithContext:async: instead.")));

/*!
 @method refresh:
 @abstract Pulls latest changes from remote server.
 @param error Error that has occured while executing the request, if any.
 @result YES if the operation succeeded.
 */
- (BOOL)refresh:(NSError **)error __attribute__((deprecated("Use refreshAsync: instead.")));

/*!
 @method refreshWithContext:error:
 @abstract Pulls latest changes from remote server.
 @param context Object instance or NSDictionary of ‘string’ to ‘object instance’ mapping for use with interpolation of headers, request URL, or previously defined variable at SDK creation.  For more details on context, see the discussion section of this class.
 @param error Error that has occured while executing the request, if any.
 @result YES if the operation succeeded.
 */
- (BOOL)refreshWithContext:(id)context error:(NSError **)error __attribute__((deprecated("Use refreshAsyncWithContext:async: instead.")));

/*!
 @method query:params:error:
 @abstract Fetches objects from remote server.
 @param scope Named scope to request.
 @param params Named scope parameters.
 @param error Error that has occured while executing the request, if any.
 @result Array of objects.
 */
+ (NSArray *)query:(NSString *)scope
            params:(NSDictionary *)params
             error:(NSError **)error __attribute__((deprecated("Use query:params:async: instead.")));

/*!
 @method query:params:context:error:
 @abstract Fetches objects from remote server.
 @param scope Named scope to request.
 @param params Named scope parameters.
 @param context Object instance or NSDictionary of ‘string’ to ‘object instance’ mapping for use with interpolation of headers, request URL, or previously defined variable at SDK creation.  For more details on context, see the discussion section of this class.
 @param error Error that has occured while executing the request, if any.
 @result Array of objects.
 */
+ (NSArray *)query:(NSString *)scope
            params:(NSDictionary *)params
           context:(id)context
             error:(NSError **)error __attribute__((deprecated("Use query:params:context:async: instead.")));

/*!
 @method query:params:offset:limit:error:
 @abstract Fetches objects from remote server, with pagination.
 @param scope Named scope to request.
 @param params Named scope parameters.
 @param offset Number of objects to skip.
 @param limit Maximum number of objects to fetch.
 @param error Error that has occured while executing the request, if any.
 @result Array of objects.
 */
+ (NSArray *)query:(NSString *)scope
            params:(NSDictionary *)params
            offset:(NSUInteger)offset
             limit:(NSUInteger)limit
             error:(NSError **)error __attribute__((deprecated("Use query:params:offset:limit:async: instead.")));

/*!
 @method query:params:offset:limit:context:error:
 @abstract Fetches objects from remote server, with pagination.
 @param scope Named scope to request.
 @param params Named scope parameters.
 @param offset Number of objects to skip.
 @param limit Maximum number of objects to fetch.
 @param context Object instance or NSDictionary of ‘string’ to ‘object instance’ mapping for use with interpolation of headers, request URL, or previously defined variable at SDK creation.  For more details on context, see the discussion section of this class.
 @param error Error that has occured while executing the request, if any.
 @result Array of objects.
 */
+ (NSArray *)query:(NSString *)scope
            params:(NSDictionary *)params
            offset:(NSUInteger)offset
             limit:(NSUInteger)limit
           context:(id)context
             error:(NSError **)error __attribute__((deprecated("Use query:params:offset:limit:context:async: instead.")));

/*!
 @method aggregateQuery:params:error:
 @abstract Executes aggregate query on remote server.
 @param scope Named scope to request.
 @param params Named scope parameters.
 @param error Error that has occured while executing the request, if any.
 @result Result of aggregate query.
 */
+ (NSNumber *)aggregateQuery:(NSString *)scope
                      params:(NSDictionary *)params
                       error:(NSError **)error __attribute__((deprecated("Use aggregateQuery:params:async: instead.")));

/*!
 @method aggregateQuery:params:context:error:
 @abstract Executes aggregate query on remote server.
 @param scope Named scope to request.
 @param params Named scope parameters.
 @param context Object instance or NSDictionary of ‘string’ to ‘object instance’ mapping for use with interpolation of headers, request URL, or previously defined variable at SDK creation.  For more details on context, see the discussion section of this class.
 @param error Error that has occured while executing the request, if any.
 @result Result of aggregate query.
 */
+ (NSNumber *)aggregateQuery:(NSString *)scope
                      params:(NSDictionary *)params
                     context:(id)context
                       error:(NSError **)error __attribute__((deprecated("Use aggregateQuery:params:context:async: instead.")));

#pragma mark -
#pragma mark CRUD (Async)

/*!
 @methodgroup CRUD Methods (Asynchronuous)
 */

/*!
 @method createAsync:
 @abstract Persists new object on remote server.
 @param callback Callback to be executed when operation completes.
 @discussion Make sure to set the primary key unless it is generated by the server.
 */
- (void)createAsync:(APObjectCallback)callback;

/*!
 @method createAsyncWithContext:async:
 @abstract Persists new object on remote server.
 @param context Object instance or NSDictionary of ‘string’ to ‘object instance’ mapping for use with interpolation of headers, request URL, or previously defined variable at SDK creation.  For more details on context, see the discussion section of this class.
 @param callback Callback to be executed when operation completes.
 @discussion Make sure to set the primary key unless it is generated by the server.
 */
- (void)createAsyncWithContext:(id)context async:(APObjectCallback)callback;

/*!
 @method updateAsync:
 @abstract Updates existing object on remote server.
 @param callback Callback to be executed when operation completes.
 */
- (void)updateAsync:(APObjectCallback)callback;

/*!
 @method updateAsyncWithContext:async:
 @abstract Updates existing object on remote server.
 @param context Object instance or NSDictionary of ‘string’ to ‘object instance’ mapping for use with interpolation of headers, request URL, or previously defined variable at SDK creation.  For more details on context, see the discussion section of this class.
 @param callback Callback to be executed when operation completes.
 */
- (void)updateAsyncWithContext:(id)context async:(APObjectCallback)callback;

/*!
 @method destroyAsync:
 @abstract Deletes existing object on remote server.
 @param callback Callback to be executed when operation completes.
 */
- (void)destroyAsync:(APObjectCallback)callback;

/*!
 @method destroyAsyncWithContext:async:
 @abstract Deletes existing object on remote server.
 @param context Object instance or NSDictionary of ‘string’ to ‘object instance’ mapping for use with interpolation of headers, request URL, or previously defined variable at SDK creation.  For more details on context, see the discussion section of this class.
 @param callback Callback to be executed when operation completes.
 */
- (void)destroyAsyncWithContext:(id)context async:(APObjectCallback)callback;

/*!
 @method refreshAsync:
 @abstract Pulls latest changes from remote server.
 @param callback Callback to be executed when operation completes.
 */
- (void)refreshAsync:(APObjectCallback)callback;

/*!
 @method refreshAsyncWithContext:async:
 @abstract Pulls latest changes from remote server.
 @param context Object instance or NSDictionary of ‘string’ to ‘object instance’ mapping for use with interpolation of headers, request URL, or previously defined variable at SDK creation.  For more details on context, see the discussion section of this class.
 @param callback Callback to be executed when operation completes.
 */
- (void)refreshAsyncWithContext:(id)context async:(APObjectCallback)callback;

/*!
 @method query:params:async:
 @abstract Returns cached objects, then fetches fresh data from remote server.
 @param scope Named scope to request.
 @param params Named scope parameters.
 @param callback Callback to be executed when operation completes.
 @result Array of cached objects.
 */
+ (NSArray *)query:(NSString *)scope
            params:(NSDictionary *)params
             async:(APObjectsCallback)callback;

/*!
 @method query:params:context:async:
 @abstract Returns cached objects, then fetches fresh data from remote server.
 @param scope Named scope to request.
 @param params Named scope parameters.
 @param context Object instance or NSDictionary of ‘string’ to ‘object instance’ mapping for use with interpolation of headers, request URL, or previously defined variable at SDK creation.  For more details on context, see the discussion section of this class.
 @param callback Callback to be executed when operation completes.
 @result Array of cached objects.
 */
+ (NSArray *)query:(NSString *)scope
            params:(NSDictionary *)params
           context:(id)context
             async:(APObjectsCallback)callback;

/*!
 @method query:params:offset:limit:async:
 @abstract Returns cached objects, then fetches fresh data from remote server, with pagination.
 @param scope Named scope to request.
 @param params Named scope parameters.
 @param offset Number of objects to skip.
 @param limit Maximum number of objects to fetch.
 @param callback Callback to be executed when operation completes.
 @result Array of cached objects.
 */
+ (NSArray *)query:(NSString *)scope
            params:(NSDictionary *)params
            offset:(NSUInteger)offset
             limit:(NSUInteger)limit
             async:(APObjectsCallback)callback;

/*!
 @method query:params:offset:limit:context:async:
 @abstract Returns cached objects, then fetches fresh data from remote server, with pagination.
 @param scope Named scope to request.
 @param params Named scope parameters.
 @param offset Number of objects to skip.
 @param limit Maximum number of objects to fetch.
 @param context Object instance or NSDictionary of ‘string’ to ‘object instance’ mapping for use with interpolation of headers, request URL, or previously defined variable at SDK creation.  For more details on context, see the discussion section of this class.
 @param callback Callback to be executed when operation completes.
 @result Array of cached objects.
 */
+ (NSArray *)query:(NSString *)scope
            params:(NSDictionary *)params
            offset:(NSUInteger)offset
             limit:(NSUInteger)limit
           context:(id)context
             async:(APObjectsCallback)callback;

/*!
 @method aggregateQuery:params:async:
 @abstract Executes aggregate query on remote server.
 @param scope Named scope to request.
 @param params Named scope parameters.
 @param callback Callback to be executed when operation completes.
 */
+ (void)aggregateQuery:(NSString *)scope
                params:(NSDictionary *)params
                 async:(APObjectCallback)callback;

/*!
 @method aggregateQuery:params:context:async:
 @abstract Executes aggregate query on remote server.
 @param scope Named scope to request.
 @param params Named scope parameters.
 @param context Object instance or NSDictionary of ‘string’ to ‘object instance’ mapping for use with interpolation of headers, request URL, or previously defined variable at SDK creation.  For more details on context, see the discussion section of this class.
 @param callback Callback to be executed when operation completes.
 */
+ (void)aggregateQuery:(NSString *)scope
                params:(NSDictionary *)params
               context:(id)context
                 async:(APObjectCallback)callback;

@end
